/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package grandprixworld.gui.raceWeekend;

import grandprixworld.gui.FullGame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author Josh Brookes
 */
public class rwCircuitMap extends javax.swing.JPanel {

    public static BufferedImage trackbkg;
    public static List<Vec3> grid = new ArrayList<Vec3>();
    public static List<Vec3> pits = new ArrayList<Vec3>();
    public static float startDir;
    public static List<Vec3[]> waypoints;
    public static int pitInIndex;
    public static int pitOutIndex;
    public static int limitStartIndex;
    public static int limitEndIndex;
    public static int pitTimingIndex;
    public static float pitSpeedLimit;
    public static double kmlength;
    public static double record;

    public static double tQ;
    public static double tPaceGap = 2.114;//Temporary
    public static double tmassChange = 0.033;// secs/kg
    public static double tInLap = 16;
    public static double tOutLap = 5;
    public static double tGridPos = 0.6;
    public static double tFirstLap = 2;
    //boolean started = false;

    /**
     * Creates new form rwCircuitMap
     */
    public rwCircuitMap(String circuitCode) {
        initComponents();
        kmlength = FullGame.data.f1.findNextEvent().venue.KmLength;
        record = FullGame.data.f1.findNextEvent().venue.record;
        tQ = record;
        pitSpeedLimit = 30f;
        waypoints = new ArrayList<Vec3[]>();
        setupWaypoints(circuitCode);
        try {
            trackbkg = ImageIO.read(getClass().getResource("/resources/" + circuitCode + ".jpg"));
        } catch (Exception ex) {
            Logger.getLogger(rwCircuitMap.class.getName()).log(Level.SEVERE, null, ex);
        }

        //graphics = this.getGraphics();
    }

    public rwCircuitMap() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(4800, 2360));
        setMinimumSize(new java.awt.Dimension(4800, 2360));
        setPreferredSize(new java.awt.Dimension(4800, 2360));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 4800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2360, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setupWaypoints(String circuitCode) {
        List<String[]> fileContents = readFile("gamedata//" + circuitCode + ".way");
        Vec3[] gate = new Vec3[2];
        for (String[] s : fileContents) {
            switch (s[0]) {
                case "\"grid":
                    int[] start = parseCoords(s[1]);
                    grid.add(new Vec3(start[0], start[1], 0));
                    break;
                case "\"pit":
                    int[] pit = parsePitlane(s[1]);
                    pits.add(new Vec3(pit[0], pit[1], 0));
                    if (pit[2] == 1) {
                        limitStartIndex = pits.size() - 1;
                    } else if (pit[2] == 2) {
                        pitTimingIndex = pits.size() - 1;
                    } else if (pit[2] == 3) {
                        limitEndIndex = pits.size() - 1;
                    }
                    break;
                case "\"left":
                    int[] gateL = parseCoords(s[1]);
                    gate[0] = new Vec3(gateL[0], gateL[1], 0);
                    break;
                case "\"right":
                    int[] gateR = parseCoords(s[1]);
                    gate[1] = new Vec3(gateR[0], gateR[1], 0);
                    waypoints.add(gate);
                    gate = new Vec3[2];
                    break;
                case "\"pitout":
                    pitOutIndex = Integer.parseInt(s[1].substring(0, s[1].length() - 1));
                    break;
                case "\"pitin":
                    pitInIndex = Integer.parseInt(s[1].substring(0, s[1].length() - 1));
                    break;
            }
        }
    }

    private List<String[]> readFile(String file) {
        List<String[]> fileContents = new ArrayList<String[]>();
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String s;
            while ((s = br.readLine()) != null) {
                fileContents.add(parseLine(s));
            }

        } catch (IOException e) {
            System.out.println(e);
        }
        return fileContents;
    }

    private String[] parseLine(String s) {
        String[] line = new String[2];
        line[0] = "";
        line[1] = "";
        while (true) {
            if (s.equals("")) {
                break;
            }
            if (s.charAt(0) == '=') {
                line[1] = s.substring(1);
                break;
            }
            line[0] += s.charAt(0);
            s = s.substring(1);
        }
        if (!line[0].equals("") && !line[1].equals("")) {
            return line;
        } else {
            return null;
        }
    }

    private int[] parseCoords(String s) {
        int[] coords = new int[2];
        String before = "";
        while (true) {
            if (s.equals("")) {
                break;
            }
            if (s.charAt(0) == ',') {
                coords[1] = Integer.parseInt(s.substring(1, s.length() - 1));
                coords[0] = Integer.parseInt(before);
                break;
            }
            before += s.charAt(0);
            s = s.substring(1);
        }
        return coords;
    }

    private int[] parsePitlane(String s) {
        int[] pits = new int[3];
        String x = "";
        int i = 0;
        while (true) {
            if (s.equals("\"")) {
                pits[i] = Integer.parseInt(x);
                break;
            }
            if (s.charAt(0) == ',') {
                pits[i] = Integer.parseInt(x);
                i++;
                x = "";
            } else {
                x += s.charAt(0);
            }
            s = s.substring(1);
        }
        return pits;
    }

    @Override
    public void paintComponent(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        //Graphics2D backg = (Graphics2D) g;
        g2d.drawImage(trackbkg, 0, 0, null);
        //AffineTransform at = backg.getTransform();
        //if (started) {
        for (int i = 0; i < 20; i++) {
            Race.cars[i].draw(g2d);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
